#!perl

use strict;
use warnings;

use IO::File;
use File::Glob qw/:bsd_glob/;
use Fcntl qw/:seek/;

my $path = (bsd_glob("*.csproj", GLOB_NOCASE))[0] || '';
unless ($path) {
	print STDERR "Can't find a .csproj file to operate on!\n";
	exit 2;
}

my $userVer = lc(shift @ARGV || 'none');
my $numVer;
if ($userVer !~ m/^(?:\d+(?:\.\d+)?|major|minor|none)$/) {
	print STDERR qq{Invalid version, must be <major[.minor]> or keyword "major", "minor", "none"\n};
	exit 3;
}

my $file = IO::File->new($path, O_RDWR | O_APPEND);
$file->seek(0, SEEK_SET);
unless ($file) {
	printf STDERR qq{Failed to open "%s" (%s)\n}, $path, $! || "unknown error";
	exit 255;
}
my @lines = map { s/\r?\n$//r } $file->getlines;
for (my $i = 0; $i < @lines; ++$i) {
	my $line = $lines[$i];
	if ($line =~ m{^(\s*)<Version>(\d+(?:\.\d+)?)</Version>}i) {
		my ($lead, $old) = ($1, $2);
		my @parts = split /\./, $old;
		$parts[$_] //= 0 for 0..1;
		if ($userVer eq "major") {
			++$parts[0];
			$parts[1] = 0;
		}
		elsif ($userVer eq "minor") {
			++$parts[1];
		}
		elsif ($userVer eq "none") {
			# nop
		}
		else {
			@parts = split /\./, $userVer;
		}
		$parts[$_] //= 0 for 0..1;
		$numVer = join '.', @parts;
		if ($userVer eq "none") {
			print "Current version is $numVer\n";
		}
		else {
			print "Updating from version $old to $numVer...\n";
		}
		$lines[$i] = "$lead<Version>$numVer</Version>";
	}
}

$file->seek(0, SEEK_SET);
$file->truncate(0);
$file->print(join "\n", @lines);
$file->print("\n");
$file->close;

